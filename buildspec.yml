# version: 0.2

# phases:
#   install:
#     runtime-versions:
#       python: 3.9
#   pre_build:
#     commands:
#       - echo Logging in to Amazon ECR...
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO_URI
#   build:
#     commands:
#       - echo Build started on `date`
#       - echo Building the Docker image...
#       - cd Services
#       - docker build -t $ECR_REPO_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .
#       - docker tag $ECR_REPO_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION $ECR_REPO_URI:latest
#   post_build:
#     commands:
#       - echo Build completed on `date`
#       - echo Pushing the Docker image...
#       - docker push $ECR_REPO_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION
#       - docker push $ECR_REPO_URI:latest
#       - echo Writing image definitions file...
#       - printf '[{"name":"LaundryServiceContainer","imageUri":"%s"}]' $ECR_REPO_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION > imagedefinitions.json

# artifacts:
#   files: imagedefinitions.json
version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      # Log into Docker Hub (optional, if you're pulling from Docker Hub)
      - echo "Authenticating with Docker Hub"
      - export DOCKER_USERNAME=$(aws secretsmanager get-secret-value --secret-id DockerHubCredentials --query SecretString --output text | jq -r .DOCKERHUB_USERNAME)
      - export DOCKER_PASSWORD=$(aws secretsmanager get-secret-value --secret-id DockerHubCredentials --query SecretString --output text | jq -r .DOCKERHUB_TOKEN)
      - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      
  pre_build:
    commands:
      # Authenticate to ECR and set the image tag
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 448049814374.dkr.ecr.us-east-1.amazonaws.com/laundry-service-repo
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "ECR_REPO_URI: $ECR_REPO_URI"
      - echo "IMAGE_TAG: $IMAGE_TAG"

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      # Build the Docker image and tag it with both the commit hash and "latest"
      - docker build -t $ECR_REPO_URI:$IMAGE_TAG .
      - docker tag $ECR_REPO_URI:$IMAGE_TAG $ECR_REPO_URI:latest

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      # Push both the commit hash tag and the "latest" tag to ECR
      - docker push $ECR_REPO_URI:$IMAGE_TAG
      - docker push $ECR_REPO_URI:latest
      # Generate imageDetail.json (used for ECS deployment)
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $ECR_REPO_URI:$IMAGE_TAG > imageDetail.json
      - cat imageDetail.json

artifacts:
  files:
    - imageDetail.json
  base-directory: .
